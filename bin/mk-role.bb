#!/usr/bin/env bb

(require '[clojure.string :as str]
         '[babashka.fs :as fs])

(defn prompt [question]
  (print question)
  (flush)
  (read-line))

(defn sanitize-role-name [name]
  (-> name
      str/trim
      (str/lower-case)
      (str/replace #"[^a-z0-9_-]" "-")))

(def role-name
  (sanitize-role-name (prompt "🔧 Role name? ")))

(when (empty? role-name)
  (println "❌ Role name cannot be empty!")
  (System/exit 1))

(def role-path (str "roles/" role-name))
(def deps-input (prompt "➕ Add dependencies? (comma separated, optional) "))
(def deps (->> (str/split deps-input #",")
               (map str/trim)
               (remove str/blank?)))

;; Create folders
(doseq [sub ["tasks" "files" "templates" "meta"]]
  (fs/create-dirs (str role-path "/" sub)))

;; README
(spit (str role-path "/README.md")
      (format "# Role: %s\n\nAutogenerated by `bb mk-role`\n" role-name))

;; tasks/main.yml
(spit (str role-path "/tasks/main.yml")
      (str
       "---\n"))

;; meta/main.yml (if deps exist)
(when (seq deps)
  (spit (str role-path "/meta/main.yml")
        (str
         "---\n"
         "dependencies:\n"
         (str/join "\n" (map #(str "  - role: " %) deps)) "\n")))

;; Success output
(println (str "✅ Created role: " role-path))
(println "📁  ├── tasks/main.yml")
(when (seq deps)
  (println "📁  ├── meta/main.yml (with deps)"))
(println "📁  ├── README.md")
(println "📁  └── (empty dirs: files/, templates/)\n")
(println "Ready to hack 😎")
